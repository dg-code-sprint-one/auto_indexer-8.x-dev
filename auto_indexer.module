<?php

/**
 * @file
 * Auto-index: Automatically indexes node content on update.
 *
 * Uses Drupal's search module to automatically index updated nodes as
 * and when they are updated.
 *
 * This means that a user can update node content and that content is
 * immediately searchable, by users of the site.
 */

use Drupal\node\NodeInterface;
use Drupal\comment\CommentInterface;

/**
 * Implements hook_ENTITY_TYPE_delete().
 */
function auto_indexer_node_delete(NodeInterface $node) {

  // Update search totals to reflect deleted node content.
  search_update_totals();
}

/**
 * Implements hook_ENTITY_TYPE_update().
 */
function auto_indexer_node_update(NodeInterface $node) {
  auto_indexer_auto_index_node($node);
}

/**
 * Implements hook_ENTITY_TYPE_insert().
 */
function auto_indexer_node_insert(NodeInterface $node) {
  auto_indexer_auto_index_node($node);
}

/**
 * Implements hook_ENTITY_TYPE_insert().
 */
function auto_indexer_comment_insert(CommentInterface $comment) {
  auto_indexer_auto_index_node_comment($comment);
}

/**
 * Implements hook_ENTITY_TYPE_update().
 */
function auto_indexer_comment_update(CommentInterface $comment) {
  auto_indexer_auto_index_node_comment($comment);
}

/**
 * Implements hook_ENTITY_TYPE_delete().
 */
function auto_indexer_comment_delete(CommentInterface $comment) {
  auto_indexer_auto_index_node_comment($comment);
}

/**
 * Implements hook_ENTITY_TYPE_publish().
 */
function auto_indexer_comment_publish(CommentInterface $comment) {
  auto_indexer_auto_index_node_comment($comment);
}

/**
 * Implements hook_ENTITY_TYPE_unpublish().
 */
function auto_indexer_comment_unpublish(CommentInterface $comment) {
  auto_indexer_auto_index_node_comment($comment);
}

/**
 * Function triggered on node insert and update.
 */
function auto_indexer_auto_index_node(NodeInterface &$node) {

  // Extract the node ID.
  $node_id = $node->id();

  // Do the node ID has already been indexed.
  auto_indexer_indexing($node_id);
}

/**
 * Function triggered on comment insert/update/delete/published/unpublished.
 */
function auto_indexer_auto_index_node_comment(CommentInterface &$comment) {

  // Extract the comment using node ID.
  $node_id = $comment->getCommentedEntityId();

  // Do the node ID has already been indexed.
  auto_indexer_indexing($node_id);
}

/**
 * Indexes a single node.
 *
 * @param \Drupal\node\NodeInterface $node
 *   The node to index.
 */
function auto_indexer_index_node(NodeInterface &$node) {
  $languages   = $node->getTranslationLanguages();
  $node_render = \Drupal::entityManager()->getViewBuilder('node');
  foreach ($languages as $language) {
    $node = $node->getTranslation($language->getId());

    // Render the node.
    $build = $node_render->view($node, 'search_index', $language->getId());
    unset($build['#theme']);

    // Add the title to text so it is searchable.
    $build['search_title'] = [
      '#prefix'     => '<h1>',
      '#plain_text' => $node->label(),
      '#suffix'     => '</h1>',
      '#weight'     => -1000,
    ];
    $text = \Drupal::service('renderer')->renderPlain($build);

    // Fetch extra data normally not visible.
    $extra = \Drupal::moduleHandler()->invokeAll('node_update_index', [$node]);
    foreach ($extra as $t) {
      $text .= $t;
    }

    // Update index, using search index "type" equal to the plugin ID.
    // "node_search" is a static plugin ID for all indexNode.
    search_index('node_search', $node->id(), $language->getId(), $text);
  }
}

/**
 * Function triggered on node ID has already been indexed.
 */
function auto_indexer_indexing($node_id) {

  // Static variable to keep track of any node ids already indexed.
  static $indexed_nodes = array();

  // Check if the node ID has already been indexed.
  if (array_search($node_id, $indexed_nodes) === FALSE) {

    // Ensure we force the cache to be updated so latest content is indexed.
    $node = \Drupal::entityManager()->getStorage('node')->load($node_id);

    // Do the indexing of this node only.
    auto_indexer_index_node($node);

    // Update search totals.
    search_update_totals();

    // Append to array to ensure node only indexed once per action.
    $indexed_nodes[] = $node_id;
  }
}
